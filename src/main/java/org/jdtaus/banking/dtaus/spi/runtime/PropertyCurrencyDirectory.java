/*
 *  jDTAUS - DTAUS fileformat.
 *  Copyright (C) 2005 - 2007 Christian Schulte <cs@schulte.it>
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */
package org.jdtaus.banking.dtaus.spi.runtime;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Collection;
import java.util.Currency;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Properties;
import org.jdtaus.banking.dtaus.spi.CurrencyDirectory;
import org.jdtaus.core.container.ContainerError;
import org.jdtaus.core.container.ContainerFactory;
import org.jdtaus.core.container.ContainerInitializer;
import org.jdtaus.core.container.ContextFactory;
import org.jdtaus.core.container.ContextInitializer;
import org.jdtaus.core.container.Dependency;
import org.jdtaus.core.container.Implementation;
import org.jdtaus.core.container.ModelFactory;
import org.jdtaus.core.logging.spi.Logger;

/**
 * {@code CurrencyDirectory} Implementierung konfiguriert über eine
 * Property-Datei.
 *
 * @author <a href="mailto:cs@schulte.it">Christian Schulte</a>
 * @version $Id$
 */
public class PropertyCurrencyDirectory
    implements CurrencyDirectory, ContainerInitializer {
    
    //--Constructors------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /** Protected <code>PropertyCurrencyDirectory</code> implementation constructor.
    * @param meta Implementation meta-data.
    */
    protected PropertyCurrencyDirectory(final Implementation meta) {
        super();
        this._propertiesResource = (java.lang.String) meta.getProperties().
            getProperty("propertiesResource").getValue();

        this.assertValidProperties();
    }
    /** Protected <code>PropertyCurrencyDirectory</code> dependency constructor.
    * @param meta Dependency meta-data.
    */
    protected PropertyCurrencyDirectory(final Dependency meta) {
        super();
        this._propertiesResource = (java.lang.String) meta.getProperties().
            getProperty("propertiesResource").getValue();

        this.assertValidProperties();
    }

    //------------------------------------------------------------Constructors--
    //--Dependencies------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /** Configured <code>Logger</code> implementation. */
    private transient Logger _dependency0;

    /** <code>Logger</code> implementation getter. */
    private Logger getLogger() {
        Logger ret = null;
        if(this._dependency0 != null) {
           ret = this._dependency0;
        } else {
            ret = (Logger) ContainerFactory.getContainer().
                getDependency(PropertyCurrencyDirectory.class,
                "Logger");

            if(ret == null) {
                throw new ContainerError("Logger");
            }

            if(ModelFactory.getModel().getModules().
                getImplementation(PropertyCurrencyDirectory.class.getName()).
                getDependencies().getDependency("Logger").
                isBound()) {

                this._dependency0 = ret;
            }
        }

        if(ret instanceof ContextInitializer && !((ContextInitializer) ret).
            isInitialized(ContextFactory.getContext())) {

            ((ContextInitializer) ret).initialize(ContextFactory.getContext());
        }

        return ret;
    }

    //------------------------------------------------------------Dependencies--
    //--Properties--------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /**
     * Property {@code propertiesResource}.
     * @serial
     */
    private java.lang.String _propertiesResource;

    /** <code>propertiesResource</code> property getter. */
    protected java.lang.String getPropertiesResource() {
        return this._propertiesResource;
    }


    //--------------------------------------------------------------Properties--
    //--ContainerInitializer----------------------------------------------------
    
    /** Mapping von ISO-Codes zu DTAUS-Codes. */
    private Map codes;
    
    public void initialize() throws ContainerError {
        char code;
        this.codes = this.getProperties();
        final Currency[] currencies = this.getCurrencies();
        
        // Sanity check.
        for(int i = currencies.length - 1; i >= 0; i--) {
            if(this.getCurrency(this.getCode(currencies[i])) == null) {
                throw new IllegalArgumentException(
                    currencies[i].getCurrencyCode());
                
            }
        }
    }
    
    //----------------------------------------------------ContainerInitializer--
    //--CurrencyDirectory-------------------------------------------------------
    
    /** Prefix für ISO-Code Schlüssel. */
    private static final String ISO_PREFIX = "iso.";
    private static final int ISO_LENGTH = ISO_PREFIX.length();
    
    /** Prefix für DTAUS-Code Schlüssel. */
    private static final String DTAUS_PREFIX = "dtaus.";
    private static final int DTAUS_LENGTH = DTAUS_PREFIX.length();
    
    public Currency[] getCurrencies() {
        String key;
        String value;
        
        final Iterator it;
        final Collection col = new LinkedList();
        
        for(it = this.codes.keySet().iterator(); it.hasNext();) {
            key = (String) it.next();
            value = (String) this.codes.get(key);
            
            if(key.startsWith(PropertyCurrencyDirectory.ISO_PREFIX)) {
                col.add(Currency.getInstance(key.substring(
                    PropertyCurrencyDirectory.ISO_LENGTH)));
                
            } else if(!key.startsWith(PropertyCurrencyDirectory.DTAUS_PREFIX)) {
                throw new IllegalArgumentException(key);
            }
        }
        
        return (Currency[]) col.toArray(new Currency[col.size()]);
    }
    
    public char getCode(final Currency currency) {
        if(currency == null) {
            throw new NullPointerException("currency");
        }
        
        String key;
        String value;
        char ret = '?';
        boolean valid = false;
        
        final Iterator it;
        
        for(it = this.codes.keySet().iterator(); it.hasNext();) {
            key = (String) it.next();
            value = (String) this.codes.get(key);
            
            if(key.startsWith(PropertyCurrencyDirectory.ISO_PREFIX) &&
                key.substring(PropertyCurrencyDirectory.ISO_LENGTH).
                equals(currency.getCurrencyCode())) {
                
                if(value == null || value.length() != 1) {
                    throw new IllegalArgumentException(value);
                }
                
                ret = value.toCharArray()[0];
                valid = true;
                break;
            }
        }
        
        if(!valid) {
            throw new IllegalArgumentException(currency.getCurrencyCode());
        }
        
        return ret;
    }
    
    public Currency getCurrency(char code) {
        String key;
        String value;
        Currency ret = null;
        
        final Iterator it;
        
        for(it = this.codes.keySet().iterator(); it.hasNext();) {
            key = (String) it.next();
            value = (String) this.codes.get(key);
            
            if(key.startsWith(PropertyCurrencyDirectory.DTAUS_PREFIX) &&
                key.substring(PropertyCurrencyDirectory.DTAUS_LENGTH).
                equals(Character.toString(code))) {
                
                if(value == null || value.length() != 3) {
                    throw new IllegalArgumentException(value);
                }
                
                ret = Currency.getInstance(value);
                break;
            }
        }
        
        return ret;
    }
    
    //-------------------------------------------------------CurrencyDirectory--
    //--PropertyCurrencyDirectory-----------------------------------------------
    
    /**
     * Mapping von ISO Codes zu DTAUS Codes.
     *
     * @return Mapping von ISO Codes zu DTAUS Codes oder {@code null}, falls
     * die Konfiguration nicht gelesen werden konnte.
     */
    protected Map getProperties() {
        Properties ret = null;
        ClassLoader c = Thread.currentThread().getContextClassLoader();
        
        final URL rsrc;
        
        if(c == null) {
            c = ClassLoader.getSystemClassLoader();
        }
        if(c == null) {
            throw new IllegalStateException();
        }
        
        rsrc = c.getResource(this.getPropertiesResource());
        if(rsrc != null) {
            InputStream stream = null;
            try {
                stream = rsrc.openStream();
                ret = new Properties();
                ret.load(stream);
            } catch(IOException e) {
                this.getLogger().error(e);
                ret = null;
            } finally {
                if(stream != null) {
                    try {
                        stream.close();
                    } catch(IOException e) {
                        this.getLogger().error(e);
                        ret = null;
                    }
                }
            }
        }
        
        return ret;
    }
    
    /**
     * Prüft konfigurierte Properties.
     *
     * @throws ContainerError bei ungültigen Property-Werten.
     */
    protected void assertValidProperties() {
        if(this.getProperties() == null) {
            throw new ContainerError("propertiesResource");
        }
    }
    
    //-----------------------------------------------PropertyCurrencyDirectory--
    
}
